{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../../node_modules/generator-sort/build/index.js","../../../src/VirtualTable.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.42.4' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction compareStrings(sA, sB) {\n    return sA > sB ? 1 : sA < sB ? -1 : 0;\n}\nexports.compareStrings = compareStrings;\nfunction compareNumbers(sA, sB) {\n    return sA - sB;\n}\nexports.compareNumbers = compareNumbers;\nfunction reverse(r) {\n    return -r;\n}\nexports.reverse = reverse;\nfunction compareStringsCaseInsensitive(sA, sB) {\n    return sA.localeCompare(sB, undefined, {\n        sensitivity: 'base',\n    });\n}\nexports.compareStringsCaseInsensitive = compareStringsCaseInsensitive;\nfunction sortFunction(gen) {\n    return (a, b) => {\n        for (let comp of gen(a, b)) {\n            if (comp) {\n                return comp;\n            }\n        }\n        return 0;\n    };\n}\nexports.sortFunction = sortFunction;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLFNBQWdCLGNBQWMsQ0FBQyxFQUFVLEVBQUUsRUFBVTtJQUNqRCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN6QyxDQUFDO0FBRkQsd0NBRUM7QUFFRCxTQUFnQixjQUFjLENBQUMsRUFBVSxFQUFFLEVBQVU7SUFDakQsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFBO0FBQ2xCLENBQUM7QUFGRCx3Q0FFQztBQUVELFNBQWdCLE9BQU8sQ0FBQyxDQUFnQjtJQUNwQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0FBQ2IsQ0FBQztBQUZELDBCQUVDO0FBRUQsU0FBZ0IsNkJBQTZCLENBQUMsRUFBVSxFQUFFLEVBQVU7SUFDaEUsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUU7UUFDbkMsV0FBVyxFQUFFLE1BQU07S0FDdEIsQ0FBa0IsQ0FBQTtBQUN2QixDQUFDO0FBSkQsc0VBSUM7QUFFRCxTQUFnQixZQUFZLENBQ3hCLEdBQW9EO0lBRXBELE9BQU8sQ0FBQyxDQUFJLEVBQUUsQ0FBSSxFQUFFLEVBQUU7UUFDbEIsS0FBSyxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO1lBQ3hCLElBQUksSUFBSSxFQUFFO2dCQUNOLE9BQU8sSUFBSSxDQUFBO2FBQ2Q7U0FDSjtRQUVELE9BQU8sQ0FBQyxDQUFBO0lBQ1osQ0FBQyxDQUFBO0FBQ0wsQ0FBQztBQVpELG9DQVlDIn0=","<script>\n    const CLASSNAME_TABLE = 'tablesort' // keep same for compatibility with https://github.com/mattiash/svelte-tablesort\n    const CLASSNAME_SORTABLE = 'sortable'\n    const CLASSNAME_ASC = 'ascending'\n    const CLASSNAME_DESC = 'descending'\n\n    import {\n        compareNumbers,\n        compareStrings,\n        sortFunction,\n    } from 'generator-sort'\n    import { onMount, tick } from 'svelte'\n\n    // props\n    export let items\n    export let requireBorderCollapse = false\n    let className = ''\n    export { className as class }\n\n    // MARK: virtual stuff\n    export let height = '100%' // the height of the viewport/table\n    export let itemHeight = undefined // the height of each row\n\n    // read-only, but visible to consumers via bind:start resp. bind:end\n    export let start = 0 // the index of the first visible item\n    export let end = 0 // the index of the last visible item\n\n    // local state\n    let averageHeight\n    let bottom = 0\n    let contents\n    let headHeight = 0\n    let footHeight = 0\n    let heightMap = []\n    let mounted\n    let rows\n    let thead\n    let top = 0\n    let viewport\n    let viewportHeight = 0\n    let visible\n\n    // whenever `items` changes, invalidate the current heightmap\n    $: if (mounted) refreshHeightMap(sortedItems, viewportHeight, itemHeight)\n\n    async function refreshHeightMap(items, viewportHeight, itemHeight) {\n        const { scrollTop } = viewport\n        await tick() // wait until the DOM is up to date\n        let contentHeight = top - (scrollTop - headHeight)\n        let i = start\n        while (\n            contentHeight < viewportHeight - headHeight &&\n            i < items.length\n        ) {\n            let row = rows[i - start]\n            if (!row) {\n                end = i + 1\n                await tick() // render the newly visible row\n                row = rows[i - start]\n            }\n            const row_height = (heightMap[i] = itemHeight || row.getBoundingClientRect().height)\n            contentHeight += row_height\n            i += 1\n        }\n        end = i\n        const remaining = items.length - end\n        averageHeight = (top + contentHeight) / end\n        bottom = remaining * averageHeight + footHeight\n        heightMap.length = items.length\n        await scrollToIndex(0, { behavior: 'auto' })\n    }\n\n    function getComputedPxAmount(elem, pseudoElem, property) {\n        const compStyle = getComputedStyle(elem, pseudoElem)\n        return parseInt(compStyle[property])\n    }\n\n    async function handleScroll() {\n        rows = contents.children\n        const isStartOverflow = sortedItems.length < start\n        const rowBottomBorder = getComputedPxAmount(\n            rows[1],\n            null,\n            'border-bottom-width'\n        )\n        const rowTopBorder = getComputedPxAmount(\n            rows[1],\n            null,\n            'border-top-width'\n        )\n        const headBorderTop = getComputedPxAmount(\n            thead,\n            null,\n            'border-top-width'\n        )\n        const headBorderBottom = getComputedPxAmount(\n            thead,\n            null,\n            'border-bottom-width'\n        )\n        const actualBorderCollapsedWidth = requireBorderCollapse ? Math.max(\n            rowBottomBorder,\n            rowTopBorder\n        ) : 0;\n\n        if (isStartOverflow) {\n            await scrollToIndex(sortedItems.length - 1, { behavior: 'auto' })\n        }\n\n        const { scrollTop } = viewport\n        let new_start = 0\n        // acquire height map for currently visible rows\n        for (let v = 0; v < rows.length; v += 1) {\n            heightMap[start + v] = itemHeight || rows[v].getBoundingClientRect().height\n        }\n        let i = 0\n        // start from top: thead, with its borders, plus the first border to afterwards neglect\n        let y = headHeight + rowTopBorder / 2\n        let row_heights = []\n        // loop items to find new start\n        while (i < sortedItems.length) {\n            const row_height = heightMap[i] || averageHeight\n            row_heights[i] = row_height\n            // we only want to jump if the full (incl. border) row is away\n            if (y + row_height + actualBorderCollapsedWidth > scrollTop) {\n                // this is the last index still inside the viewport\n                new_start = i\n                top =\n                    y -\n                    (requireBorderCollapse\n                        ? ((headBorderBottom + headBorderTop)/2)\n                        : (headHeight + rowTopBorder/2)) //+ rowBottomBorder - rowTopBorder\n                break\n            }\n            y += row_height\n            i += 1\n        }\n\n        console.log(\n            'a',\n            i,\n            y,\n            top,\n            bottom,\n            scrollTop,\n            headHeight,\n            averageHeight,\n            actualBorderCollapsedWidth,\n            row_heights,\n            heightMap\n        )\n        new_start = Math.max(0, new_start)\n        // loop items to find end\n        while (i < sortedItems.length) {\n            const row_height = heightMap[i] || averageHeight\n            y += row_height\n            i += 1\n            if (y > scrollTop + viewportHeight) {\n                break\n            }\n        }\n        start = new_start\n        end = i\n        const remaining = sortedItems.length - end\n        if (end === 0) {\n            end = 10\n        }\n        averageHeight = y / end\n        let remaining_height = remaining * averageHeight // 0\n        // compute height map for remaining items\n        while (i < sortedItems.length) {\n            i += 1\n            heightMap[i] = averageHeight\n            // remaining_height += heightMap[i] / remaining\n        }\n        // find the\n        bottom = remaining_height\n        if (!isFinite(bottom)) {\n            bottom = 200000\n        }\n    }\n\n    export async function scrollToIndex(index, opts) {\n        const { scrollTop } = viewport\n        const itemsDelta = index - start\n        const _itemHeight = itemHeight || averageHeight\n        const distance = itemsDelta * _itemHeight\n        opts = {\n            left: 0,\n            top: scrollTop + distance,\n            behavior: 'smooth',\n            ...opts,\n        }\n        viewport.scrollTo(opts)\n    }\n\n    // MARK: table sort stuff\n    let sortOrder = [[]]\n\n    $: sortedItems = sorted([...items], sortOrder)\n\n    $: visible = sortedItems\n        .slice(start, end)\n        .map((data, i) => {\n            return { index: i + start, data }\n        })\n\n    const sorted = function (arr, sortOrder) {\n        arr.sort(\n            sortFunction(function* (a, b) {\n                for (let [fieldName, r] of sortOrder) {\n                    const reverse = r === 0 ? 1 : -1\n                    if (typeof a[fieldName] === 'number') {\n                        yield reverse *\n                            compareNumbers(a[fieldName], b[fieldName])\n                    } else {\n                        yield reverse *\n                            compareStrings(a[fieldName], b[fieldName])\n                    }\n                }\n            })\n        )\n\n        return arr\n    }\n\n    function updateSortOrder(th, push) {\n        const fieldName = th.dataset.sort\n        if (push) {\n            if (sortOrder[sortOrder.length - 1][0] === fieldName) {\n                sortOrder[sortOrder.length - 1] = [\n                    fieldName,\n                    (sortOrder[sortOrder.length - 1][1] + 1) % 2,\n                ]\n            } else {\n                sortOrder = [...sortOrder, [fieldName, 0]]\n            }\n        } else {\n            if (sortOrder.length === 1 && sortOrder[0][0] === fieldName) {\n                sortOrder[0] = [fieldName, (sortOrder[0][1] + 1) % 2]\n            } else {\n                resetClasses()\n                sortOrder = [[fieldName, 0]]\n            }\n        }\n        th.className =\n            CLASSNAME_SORTABLE +\n            ' ' +\n            (sortOrder[sortOrder.length - 1][1]\n                ? CLASSNAME_DESC\n                : CLASSNAME_ASC)\n    }\n\n    function resetClasses() {\n        const th = thead.getElementsByTagName('th')\n        for (let i = 0; i < th.length; i++) {\n            if (th[i].dataset.sort) {\n                th[i].className = CLASSNAME_SORTABLE\n            }\n        }\n    }\n\n    // MARK: initial triggers\n    onMount(() => {\n        // triggger initial refresh for virtual\n        rows = contents.children\n        mounted = true\n        refreshHeightMap(items, viewportHeight, itemHeight)\n\n        // prepare sorting\n        const th = thead.getElementsByTagName('th')\n        for (let i = 0; i < th.length; i++) {\n            if (th[i].dataset.sort) {\n                th[i].className = CLASSNAME_SORTABLE\n                th[i].onclick = (event) =>\n                    updateSortOrder(th[i], event.shiftKey)\n            }\n            if (th[i].dataset.sortInitial === 'descending') {\n                th[i].className = CLASSNAME_SORTABLE + ' ' + CLASSNAME_DESC\n                sortOrder = [...sortOrder, [th[i].dataset.sort, 1]]\n            } else if (th[i].dataset.sortInitial != undefined) {\n                th[i].className = CLASSNAME_SORTABLE + ' ' + CLASSNAME_ASC\n                sortOrder = [...sortOrder, [th[i].dataset.sort, 0]]\n            }\n        }\n    })\n</script>\n\n<svelte-virtual-table-viewport>\n    <table\n        class:require-border-collapse={requireBorderCollapse}\n        class=\"{CLASSNAME_TABLE}\n        {className} table\"\n        bind:this={viewport}\n        bind:offsetHeight={viewportHeight}\n        on:scroll={handleScroll}\n        role=\"table\"\n        style=\"height: {height}; --bw-svt-p-top: {top}px; --bw-svt-p-bottom: {bottom}px; --bw-svt-head-height: {headHeight}px; --bw-svt-foot-height: {footHeight}px; --bw-svt-avg-row-height: {averageHeight}px\"\n    >\n        <thead\n            class=\"thead\"\n            role=\"rowgroup\"\n            bind:this={thead}\n            bind:offsetHeight={headHeight}\n        >\n            <slot name=\"thead\" />\n        </thead>\n        <tbody bind:this={contents} class=\"tbody\" role=\"rowgroup\">\n            {#each visible as item}\n                <slot name=\"tbody\" item={item.data} index={item.index}>\n                    Missing Table Row\n                </slot>\n            {/each}\n        </tbody>\n        <tfoot class=\"tfoot\" bind:offsetHeight={footHeight} role=\"rowgroup\">\n            <slot name=\"tfoot\" />\n        </tfoot>\n    </table>\n</svelte-virtual-table-viewport>\n\n<style type=\"text/css\">\n    table {\n        position: relative;\n        overflow-y: auto;\n        -webkit-overflow-scrolling: touch;\n        max-height: 100vh;\n        box-sizing: border-box;\n        display: block;\n        /* table-layout: fixed; */\n    }\n    table :is(thead, tfoot, tbody) {\n        display: table;\n        table-layout: fixed;\n        width: 100%;\n        box-sizing: border-box;\n    }\n    table.require-border-collapse thead {\n        min-height: calc(var(--bw-svt-p-top));\n    }\n    table.require-border-collapse tfoot {\n        min-height: calc(var(--bw-svt-p-bottom));\n    }\n    table.require-border-collapse {\n        border-collapse: collapse;\n    }\n    table:not(.require-border-collapse) tbody {\n        padding-top: var(--bw-svt-p-top);\n        padding-bottom: var(--bw-svt-p-bottom);\n    }\n    tbody {\n        position: relative;\n        box-sizing: border-box;\n        border: 0px solid currentColor;\n    }\n\n    /** sortable styles */\n    thead :global(th.sortable) {\n        cursor: pointer;\n        user-select: none;\n        -moz-user-select: none;\n        -webkit-user-select: none;\n        -ms-user-select: none;\n    }\n</style>\n","<script>\n    // NOTE: replace the following line:\n    import VirtualTable from '../../src/VirtualTable.svelte'\n\n    // with:\n    // import VirtualTable from 'svelte-virtual-table'\n    // after installing the component using yarn/npm in your own project\n    let items = []\n    async function getData() {\n        let dataItems = []\n        for (let page = 1; page < 5; page++) {\n            let res = await fetch(\n                `https://node-hnapi.herokuapp.com/news?page=${page}`\n            )\n            let data = await res.json()\n            dataItems = dataItems.concat(data)\n        }\n        items = dataItems\n        return items\n    }\n\n    const dataPromise = getData()\n\n    let searchTerm = ''\n\n    $: filteredList = items.filter(\n        (item) =>\n            item.title.toUpperCase().indexOf(searchTerm.toUpperCase()) !== -1\n    )\n\n    let start, start2\n    let end, end2\n</script>\n\n<h1>Virtual Table Test</h1>\n\n<p>\n    This is an example-project for the Svelte Virtual (Sortable) Table\n    component. Checkout the source on <a\n        href=\"https://github.com/BernhardWebstudio/svelte-virtual-table\"\n        >GitHub</a\n    >. The table's example content is loaded from HackerNews — all rights\n    reserved. The author has no association with Svelte or Hacker News and is\n    not liable and/or otherwise responsible for any of the contents in these tables.\n</p>\n\nFilter:\n<input bind:value={searchTerm} />\n\n{#await dataPromise}\n    Loading...\n{:then}\n    <p>Without border-collapse:</p>\n    <p>Start: {start}, end: {end}</p>\n    <VirtualTable items={filteredList} class=\"test1 test2\" bind:start bind:end>\n        <tr slot=\"thead\" role=\"row\">\n            <th data-sort=\"title\">Title</th>\n            <th data-sort=\"user\">User</th>\n            <th data-sort=\"domain\">Domain</th>\n            <th data-sort=\"time\" data-sort-initial=\"descending\">Time ago</th>\n            <th data-sort=\"comments_count\">Comments</th>\n        </tr>\n        <tr slot=\"tbody\" let:item class=\"tr\" role=\"row\">\n            <td class=\"td\"\n                ><a href={item.url} target=\"_blank\">{item.title}</a></td\n            >\n            <td class=\"td\">{item.user}</td>\n            <td class=\"td\">{item.domain}</td>\n            <td class=\"td\">{item.time_ago}</td>\n            <td class=\"td\">{item.comments_count}</td>\n        </tr>\n    </VirtualTable>\n\n    <p>With border-collapse:</p>\n    <p>Start: {start2}, end: {end2}</p>\n    <VirtualTable\n        items={filteredList}\n        class=\"test1 test2\"\n        requireBorderCollapse=\"true\"\n        bind:start={start2}\n        bind:end={end2}\n    >\n        <tr slot=\"thead\" role=\"row\">\n            <th data-sort=\"title\">Title</th>\n            <th data-sort=\"user\">User</th>\n            <th data-sort=\"domain\">Domain</th>\n            <th data-sort=\"time\" data-sort-initial=\"descending\">Time ago</th>\n            <th data-sort=\"comments_count\">Comments</th>\n        </tr>\n        <tr slot=\"tbody\" let:item class=\"tr\" role=\"row\">\n            <td class=\"td\"\n                ><a href={item.url} target=\"_blank\">{item.title}</a></td\n            >\n            <td class=\"td\">{item.user}</td>\n            <td class=\"td\">{item.domain}</td>\n            <td class=\"td\">{item.time_ago}</td>\n            <td class=\"td\">{item.comments_count}</td>\n        </tr>\n    </VirtualTable>\n{:catch error}\n    <p style=\"color: red\">{error.message}</p>\n{/await}\n\n<p>\n    Thanks for checking out this Demo. Refer to the <a\n        href=\"https://github.com/BernhardWebstudio/svelte-virtual-table#readme\"\n        >README</a\n    >\n    of the original project on how to use this component and the\n    <a href=\"https://github.com/BernhardWebstudio/svelte-virtual-table/issues\"\n        >GitHub-project</a\n    > in general for known issues.\n</p>\n\n<style>\n    :global(body) {\n        background-color: white;\n    }\n\n    :global(.test1) {\n        width: 100%;\n        border: 1px solid black;\n    }\n\n    :global(.test1 thead) {\n        text-align: left;\n        border-bottom: 10px solid black;\n    }\n\n    /**\n    * This border is only visible when \n    */\n    :global(.test1 tr) {\n        border-bottom: 10px solid grey;\n        border-top: 10px solid grey;\n    }\n\n    :global(.test1 td:not(:last-of-type)) {\n        border-right: 1px solid grey;\n    }\n    :global(.test1 th:not(:last-of-type)) {\n        border-right: 1px solid grey;\n    }\n\n    /**\n    * Specify fixed widths\n    */\n    .td:first-of-type,\n    td:first-of-type,\n    :global(.test1 th:first-of-type) {\n        width: 45vw;\n    }\n\n    td,\n    .td,\n    :global(.test1 th) {\n        width: calc((45vw - 10px) / 4);\n        word-wrap: break-word;\n    }\n\n    :global(.test1 th:last-of-type),\n    .td:last-of-type,\n    td:last-of-type {\n        text-align: right;\n    }\n</style>\n","import App from './App.svelte'\n\nconst app = new App({\n    target: document.body,\n})\n\nexport default app\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","p","get_all_dirty_from_scope","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","setProperty","crossorigin","current_component","is_crossorigin","window","parent","error","add_resize_listener","getComputedStyle","position","iframe","tabIndex","unsubscribe","source","contentWindow","onload","toggle_class","toggle","classList","set_current_component","component","get_current_component","Error","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","schedule_update","then","flush","tick","add_render_callback","push","add_flush_callback","flushing","seen_callbacks","Set","update","$$","pop","callback","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","d","bind","index","props","bound","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","init","instance","create_fragment","not_equal","append_styles","parent_component","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","fill","make_dirty","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","indexOf","splice","$set","$$props","obj","$$set","keys","sA","sB","gen","comp","CLASSNAME_TABLE","iterations","CLASSNAME_SORTABLE","CLASSNAME_ASC","CLASSNAME_DESC","getComputedPxAmount","elem","pseudoElem","property","compStyle","parseInt","averageHeight","contents","mounted","rows","thead","viewport","visible","items","requireBorderCollapse","className","height","itemHeight","start","end","bottom","headHeight","footHeight","heightMap","top","viewportHeight","refreshHeightMap","scrollTop","contentHeight","row","getBoundingClientRect","remaining","scrollToIndex","behavior","opts","left","scrollTo","sortOrder","updateSortOrder","th","fieldName","dataset","sort","getElementsByTagName","resetClasses","onclick","shiftKey","sortInitial","sortedItems","arr","sortFunction","reverse","compareNumbers","compareStrings","sorted","isStartOverflow","rowBottomBorder","rowTopBorder","headBorderTop","headBorderBottom","actualBorderCollapsedWidth","new_start","v","y","row_heights","row_height","console","log","remaining_height","isFinite","message","title","user","domain","time_ago","comments_count","url","promise","info","token","resolved","child_ctx","current","needs_flush","blocks","mount","catch","hasCatch","pending","dataPromise","dataItems","page","res","fetch","json","concat","getData","start2","end2","searchTerm","filteredList","item","toUpperCase","body"],"mappings":"gCAAA,SAASA,KAgBT,SAASC,EAAIC,GACT,OAAOA,IAEX,SAASC,IACL,OAAOC,OAAOC,OAAO,MAEzB,SAASC,EAAQC,GACbA,EAAIC,QAAQP,GAEhB,SAASQ,EAAYC,GACjB,MAAwB,mBAAVA,EAElB,SAASC,EAAeC,EAAGC,GACvB,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAOD,GAAkB,iBAANA,GAAgC,mBAANA,EAoChF,SAASE,EAAYC,EAAYC,EAAKC,EAASf,GAC3C,GAAIa,EAAY,CACZ,MAAMG,EAAWC,EAAiBJ,EAAYC,EAAKC,EAASf,GAC5D,OAAOa,EAAW,GAAGG,IAG7B,SAASC,EAAiBJ,EAAYC,EAAKC,EAASf,GAChD,OAAOa,EAAW,IAAMb,EAtE5B,SAAgBkB,EAAKC,GAEjB,IAAK,MAAMC,KAAKD,EACZD,EAAIE,GAAKD,EAAIC,GACjB,OAAOF,EAmEDG,CAAON,EAAQD,IAAIQ,QAAST,EAAW,GAAGb,EAAGc,KAC7CC,EAAQD,IAElB,SAASS,EAAiBV,EAAYE,EAASS,EAAOxB,GAClD,GAAIa,EAAW,IAAMb,EAAI,CACrB,MAAMyB,EAAOZ,EAAW,GAAGb,EAAGwB,IAC9B,QAAsBE,IAAlBX,EAAQS,MACR,OAAOC,EAEX,GAAoB,iBAATA,EAAmB,CAC1B,MAAME,EAAS,GACTC,EAAMC,KAAKC,IAAIf,EAAQS,MAAMO,OAAQN,EAAKM,QAChD,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAKI,GAAK,EAC1BL,EAAOK,GAAKjB,EAAQS,MAAMQ,GAAKP,EAAKO,GAExC,OAAOL,EAEX,OAAOZ,EAAQS,MAAQC,EAE3B,OAAOV,EAAQS,MAEnB,SAASS,EAAiBC,EAAMC,EAAiBrB,EAAKC,EAASqB,EAAcC,GACzE,GAAID,EAAc,CACd,MAAME,EAAerB,EAAiBkB,EAAiBrB,EAAKC,EAASsB,GACrEH,EAAKK,EAAED,EAAcF,IAO7B,SAASI,EAAyBzB,GAC9B,GAAIA,EAAQD,IAAIiB,OAAS,GAAI,CACzB,MAAMP,EAAQ,GACRO,EAAShB,EAAQD,IAAIiB,OAAS,GACpC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQC,IACxBR,EAAMQ,IAAM,EAEhB,OAAOR,EAEX,OAAQ,EAkMZ,SAASiB,EAAOC,EAAQC,GACpBD,EAAOE,YAAYD,GAoDvB,SAASE,EAAOH,EAAQC,EAAMG,GAC1BJ,EAAOK,aAAaJ,EAAMG,GAAU,MAUxC,SAASE,EAAOL,GACZA,EAAKM,WAAWC,YAAYP,GAQhC,SAASQ,EAAQC,GACb,OAAOC,SAASC,cAAcF,GAoBlC,SAASG,EAAKC,GACV,OAAOH,SAASI,eAAeD,GAEnC,SAASE,IACL,OAAOH,EAAK,KAKhB,SAASI,EAAOhB,EAAMiB,EAAOC,EAASC,GAElC,OADAnB,EAAKoB,iBAAiBH,EAAOC,EAASC,GAC/B,IAAMnB,EAAKqB,oBAAoBJ,EAAOC,EAASC,GA8B1D,SAASG,EAAKtB,EAAMuB,EAAWC,GACd,MAATA,EACAxB,EAAKyB,gBAAgBF,GAChBvB,EAAK0B,aAAaH,KAAeC,GACtCxB,EAAK2B,aAAaJ,EAAWC,GAqLrC,SAASI,EAAShB,EAAMC,GACpBA,EAAO,GAAKA,EACRD,EAAKiB,YAAchB,IACnBD,EAAKC,KAAOA,GAEpB,SAASiB,EAAgBC,EAAOP,GAC5BO,EAAMP,MAAiB,MAATA,EAAgB,GAAKA,EAUvC,SAASQ,EAAUhC,EAAMiC,EAAKT,EAAOU,GACjClC,EAAKmC,MAAMC,YAAYH,EAAKT,EAAOU,EAAY,YAAc,IA2BjE,IAAIG,EAoQAC,EAnQJ,SAASC,IACL,QAAoBxD,IAAhBsD,EAA2B,CAC3BA,GAAc,EACd,IAC0B,oBAAXG,QAA0BA,OAAOC,QACnCD,OAAOC,OAAO/B,SAG3B,MAAOgC,GACHL,GAAc,GAGtB,OAAOA,EAEX,SAASM,EAAoB3C,EAAM3C,GAEC,WADTuF,iBAAiB5C,GACrB6C,WACf7C,EAAKmC,MAAMU,SAAW,YAE1B,MAAMC,EAAStC,EAAQ,UACvBsC,EAAOnB,aAAa,QAAS,+JAE7BmB,EAAOnB,aAAa,cAAe,QACnCmB,EAAOC,UAAY,EACnB,MAAMV,EAAcE,IACpB,IAAIS,EAeJ,OAdIX,GACAS,EAAOtE,IAAM,kFACbwE,EAAchC,EAAOwB,OAAQ,WAAYvB,IACjCA,EAAMgC,SAAWH,EAAOI,eACxB7F,SAIRyF,EAAOtE,IAAM,cACbsE,EAAOK,OAAS,KACZH,EAAchC,EAAO8B,EAAOI,cAAe,SAAU7F,KAG7DyC,EAAOE,EAAM8C,GACN,MACCT,GAGKW,GAAeF,EAAOI,gBAF3BF,IAKJ3C,EAAOyC,IAGf,SAASM,EAAa5C,EAASC,EAAM4C,GACjC7C,EAAQ8C,UAAUD,EAAS,MAAQ,UAAU5C,GAiNjD,SAAS8C,EAAsBC,GAC3BlB,EAAoBkB,EAExB,SAASC,IACL,IAAKnB,EACD,MAAM,IAAIoB,MAAM,oDACpB,OAAOpB,EAmDX,MAAMqB,EAAmB,GAEnBC,EAAoB,GACpBC,EAAmB,GACnBC,EAAkB,GAClBC,EAAmBC,QAAQC,UACjC,IAAIC,GAAmB,EACvB,SAASC,IACAD,IACDA,GAAmB,EACnBH,EAAiBK,KAAKC,IAG9B,SAASC,IAEL,OADAH,IACOJ,EAEX,SAASQ,EAAoBlH,GACzBwG,EAAiBW,KAAKnH,GAE1B,SAASoH,EAAmBpH,GACxByG,EAAgBU,KAAKnH,GAEzB,IAAIqH,GAAW,EACf,MAAMC,EAAiB,IAAIC,IAC3B,SAASP,IACL,IAAIK,EAAJ,CAEAA,GAAW,EACX,EAAG,CAGC,IAAK,IAAIrF,EAAI,EAAGA,EAAIsE,EAAiBvE,OAAQC,GAAK,EAAG,CACjD,MAAMmE,EAAYG,EAAiBtE,GACnCkE,EAAsBC,GACtBqB,EAAOrB,EAAUsB,IAIrB,IAFAvB,EAAsB,MACtBI,EAAiBvE,OAAS,EACnBwE,EAAkBxE,QACrBwE,EAAkBmB,KAAlBnB,GAIJ,IAAK,IAAIvE,EAAI,EAAGA,EAAIwE,EAAiBzE,OAAQC,GAAK,EAAG,CACjD,MAAM2F,EAAWnB,EAAiBxE,GAC7BsF,EAAeM,IAAID,KAEpBL,EAAeO,IAAIF,GACnBA,KAGRnB,EAAiBzE,OAAS,QACrBuE,EAAiBvE,QAC1B,KAAO0E,EAAgB1E,QACnB0E,EAAgBiB,KAAhBjB,GAEJI,GAAmB,EACnBQ,GAAW,EACXC,EAAeQ,SAEnB,SAASN,EAAOC,GACZ,GAAoB,OAAhBA,EAAGM,SAAmB,CACtBN,EAAGD,SACHpH,EAAQqH,EAAGO,eACX,MAAMxG,EAAQiG,EAAGjG,MACjBiG,EAAGjG,MAAQ,EAAE,GACbiG,EAAGM,UAAYN,EAAGM,SAASxF,EAAEkF,EAAG3G,IAAKU,GACrCiG,EAAGQ,aAAa3H,QAAQ4G,IAiBhC,MAAMgB,EAAW,IAAIX,IACrB,IAAIY,EACJ,SAASC,IACLD,EAAS,CACLE,EAAG,EACHC,EAAG,GACH/F,EAAG4F,GAGX,SAASI,IACAJ,EAAOE,GACRjI,EAAQ+H,EAAOG,GAEnBH,EAASA,EAAO5F,EAEpB,SAASiG,EAAcC,EAAOC,GACtBD,GAASA,EAAMzG,IACfkG,EAASS,OAAOF,GAChBA,EAAMzG,EAAE0G,IAGhB,SAASE,EAAeH,EAAOC,EAAO1F,EAAQ2E,GAC1C,GAAIc,GAASA,EAAMI,EAAG,CAClB,GAAIX,EAASN,IAAIa,GACb,OACJP,EAASL,IAAIY,GACbN,EAAOG,EAAEnB,MAAK,KACVe,EAASS,OAAOF,GACZd,IACI3E,GACAyF,EAAMK,EAAE,GACZnB,QAGRc,EAAMI,EAAEH,IA2lBhB,SAASK,EAAK5C,EAAW/C,EAAMuE,GAC3B,MAAMqB,EAAQ7C,EAAUsB,GAAGwB,MAAM7F,QACnB1B,IAAVsH,IACA7C,EAAUsB,GAAGyB,MAAMF,GAASrB,EAC5BA,EAASxB,EAAUsB,GAAG3G,IAAIkI,KAGlC,SAASG,EAAiBV,GACtBA,GAASA,EAAMH,IAKnB,SAASc,EAAgBjD,EAAWzD,EAAQI,EAAQuG,GAChD,MAAMtB,SAAEA,EAAQuB,SAAEA,EAAQC,WAAEA,EAAUtB,aAAEA,GAAiB9B,EAAUsB,GACnEM,GAAYA,EAASyB,EAAE9G,EAAQI,GAC1BuG,GAEDnC,GAAoB,KAChB,MAAMuC,EAAiBH,EAASI,IAAI3J,GAAK4J,OAAOpJ,GAC5CgJ,EACAA,EAAWpC,QAAQsC,GAKnBrJ,EAAQqJ,GAEZtD,EAAUsB,GAAG6B,SAAW,MAGhCrB,EAAa3H,QAAQ4G,GAEzB,SAAS0C,EAAkBzD,EAAW0D,GAClC,MAAMpC,EAAKtB,EAAUsB,GACD,OAAhBA,EAAGM,WACH3H,EAAQqH,EAAG8B,YACX9B,EAAGM,UAAYN,EAAGM,SAASe,EAAEe,GAG7BpC,EAAG8B,WAAa9B,EAAGM,SAAW,KAC9BN,EAAG3G,IAAM,IAWjB,SAASgJ,EAAK3D,EAAWrC,EAASiG,EAAUC,EAAiBC,EAAWhB,EAAOiB,EAAe1I,EAAQ,EAAE,IACpG,MAAM2I,EAAmBlF,EACzBiB,EAAsBC,GACtB,MAAMsB,EAAKtB,EAAUsB,GAAK,CACtBM,SAAU,KACVjH,IAAK,KAELmI,MAAAA,EACAzB,OAAQ1H,EACRmK,UAAAA,EACAf,MAAOjJ,IAEPqJ,SAAU,GACVC,WAAY,GACZa,cAAe,GACfpC,cAAe,GACfC,aAAc,GACdoC,QAAS,IAAIC,IAAIH,EAAmBA,EAAiB1C,GAAG4C,QAAUvG,EAAQuG,SAAW,IAErFE,UAAWtK,IACXuB,MAAAA,EACAgJ,YAAY,EACZC,KAAM3G,EAAQpB,QAAUyH,EAAiB1C,GAAGgD,MAEhDP,GAAiBA,EAAczC,EAAGgD,MAClC,IAAIC,GAAQ,EAkBZ,GAjBAjD,EAAG3G,IAAMiJ,EACHA,EAAS5D,EAAWrC,EAAQmF,OAAS,IAAI,CAACjH,EAAG2I,KAAQC,KACnD,MAAMzG,EAAQyG,EAAK7I,OAAS6I,EAAK,GAAKD,EAOtC,OANIlD,EAAG3G,KAAOmJ,EAAUxC,EAAG3G,IAAIkB,GAAIyF,EAAG3G,IAAIkB,GAAKmC,MACtCsD,EAAG+C,YAAc/C,EAAGyB,MAAMlH,IAC3ByF,EAAGyB,MAAMlH,GAAGmC,GACZuG,GAxCpB,SAAoBvE,EAAWnE,IACI,IAA3BmE,EAAUsB,GAAGjG,MAAM,KACnB8E,EAAiBa,KAAKhB,GACtBW,IACAX,EAAUsB,GAAGjG,MAAMqJ,KAAK,IAE5B1E,EAAUsB,GAAGjG,MAAOQ,EAAI,GAAM,IAAO,GAAMA,EAAI,GAmC/B8I,CAAW3E,EAAWnE,IAEvB2I,KAET,GACNlD,EAAGD,SACHkD,GAAQ,EACRtK,EAAQqH,EAAGO,eAEXP,EAAGM,WAAWiC,GAAkBA,EAAgBvC,EAAG3G,KAC/CgD,EAAQpB,OAAQ,CAChB,GAAIoB,EAAQiH,QAAS,CAEjB,MAAMC,EAvxClB,SAAkB7H,GACd,OAAO8H,MAAMC,KAAK/H,EAAQgI,YAsxCJC,CAAStH,EAAQpB,QAE/B+E,EAAGM,UAAYN,EAAGM,SAASsD,EAAEL,GAC7BA,EAAM1K,QAAQ0C,QAIdyE,EAAGM,UAAYN,EAAGM,SAASO,IAE3BxE,EAAQwH,OACR9C,EAAcrC,EAAUsB,GAAGM,UAC/BqB,EAAgBjD,EAAWrC,EAAQpB,OAAQoB,EAAQhB,OAAQgB,EAAQuF,eAEnErC,IAEJd,EAAsBiE,GAkD1B,MAAMoB,GACFC,WACI5B,EAAkB6B,KAAM,GACxBA,KAAKD,SAAW1L,EAEpB4L,IAAIC,EAAMhE,GACN,MAAM4C,EAAakB,KAAKhE,GAAG8C,UAAUoB,KAAUF,KAAKhE,GAAG8C,UAAUoB,GAAQ,IAEzE,OADApB,EAAUpD,KAAKQ,GACR,KACH,MAAMqB,EAAQuB,EAAUqB,QAAQjE,IACjB,IAAXqB,GACAuB,EAAUsB,OAAO7C,EAAO,IAGpC8C,KAAKC,GAtzDT,IAAkBC,EAuzDNP,KAAKQ,QAvzDCD,EAuzDkBD,EAtzDG,IAA5B7L,OAAOgM,KAAKF,GAAKjK,UAuzDhB0J,KAAKhE,GAAG+C,YAAa,EACrBiB,KAAKQ,MAAMF,GACXN,KAAKhE,GAAG+C,YAAa,IC/1DjC,OAHA,SAAwB2B,EAAIC,GACxB,OAAOD,EAAKC,EAAK,EAAID,EAAKC,GAAM,EAAI,GAMxC,OAHA,SAAwBD,EAAIC,GACxB,OAAOD,EAAKC,GAuBhB,OAVA,SAAsBC,GAClB,MAAO,CAAC3L,EAAGC,KACP,IAAK,IAAI2L,KAAQD,EAAI3L,EAAGC,GACpB,GAAI2L,EACA,OAAOA,EAGf,OAAO,qJC0R0BxL,MAAK0C,WAAa1C,MAAKkI,+HAAO,+VADpDlI,2BAALiB,yfAjBEwK,OACPzL,8DAKeA,2BAA0BA,oCAA4BA,sCAAkCA,sCAAsCA,yCAAyCA,gEAPxJA,cAFvC+B,SACIJ,OAUIA,2DAQAA,kEAOAA,iGAnBW3B,2HAaAA,cAALiB,uHAAAA,6HAjBEwK,OACPzL,yEAKeA,4CAA0BA,mDAA4BA,sDAAkCA,sDAAsCA,wDAAyCA,iDAPxJA,0CAkBzBiB,0JFkEd,SAAsByK,EAAY3C,GAC9B,IAAK,IAAI7H,EAAI,EAAGA,EAAIwK,EAAWzK,OAAQC,GAAK,EACpCwK,EAAWxK,IACXwK,EAAWxK,GAAG8G,EAAEe,oEExXlB0C,GAAkB,YAClBE,GAAqB,WACrBC,GAAgB,YAChBC,GAAiB,sBAoEdC,GAAoBC,EAAMC,EAAYC,SACrCC,EAAYzH,iBAAiBsH,EAAMC,UAClCG,SAASD,EAAUD,6BA9C1BG,EAEAC,EAIAC,EACAC,EACAC,EAEAC,EAEAC,oCA1BOC,4BACAC,GAAwB,YAC/BC,EAAY,cAILC,EAAS,sBACTC,YAGAC,EAAQ,UACRC,EAAM,KAIbC,EAAS,EAETC,EAAa,EACbC,EAAa,EACbC,KAIAC,EAAM,EAENC,EAAiB,iBAMNC,EAAiBb,EAAOY,EAAgBR,mBAC3CU,GAAchB,QAChBtG,QACFuH,EAAgBJ,GAAOG,EAAYN,GACnCjM,EAAI8L,OAEJU,EAAgBH,EAAiBJ,GACjCjM,EAAIyL,EAAM1L,aAEN0M,EAAMpB,EAAKrL,EAAI8L,GACdW,SACDV,EAAM/L,EAAI,SACJiF,IACNwH,EAAMpB,EAAKrL,EAAI8L,IAGnBU,GADoBL,EAAUnM,GAAK6L,GAAcY,EAAIC,wBAAwBd,OAE7E5L,GAAK,OAET+L,EAAM/L,SACA2M,EAAYlB,EAAM1L,OAASgM,MACjCb,GAAiBkB,EAAMI,GAAiBT,OACxCC,EAASW,EAAYzB,EAAgBgB,GACrCC,EAAUpM,OAAS0L,EAAM1L,aACnB6M,EAAc,GAAKC,SAAU,wBAiHjBD,EAAc5F,EAAO8F,mBAC/BP,GAAchB,EAItBuB,GACIC,KAAM,EACNX,IAAKG,GALUvF,EAAQ8E,IACPD,GAAcX,GAK9B2B,SAAU,YACPC,GAEPvB,EAASyB,SAASF,OAIlBG,gBA6BKC,EAAgBC,EAAIhI,SACnBiI,EAAYD,EAAGE,QAAQC,KACzBnI,EACI8H,EAAUA,EAAUlN,OAAS,GAAG,KAAOqN,OACvCH,EAAUA,EAAUlN,OAAS,IACzBqN,GACCH,EAAUA,EAAUlN,OAAS,GAAG,GAAK,GAAK,WAG/CkN,MAAgBA,GAAYG,EAAW,KAGlB,IAArBH,EAAUlN,QAAgBkN,EAAU,GAAG,KAAOG,OAC9CH,EAAU,IAAMG,GAAYH,EAAU,GAAG,GAAK,GAAK,yBAerDE,EAAK7B,EAAMiC,qBAAqB,cAC7BvN,EAAI,EAAGA,EAAImN,EAAGpN,OAAQC,IACvBmN,EAAGnN,GAAGqN,QAAQC,OACdH,EAAGnN,GAAG2L,UAAYlB,IAhBlB+C,QACAP,IAAcG,EAAW,MAGjCD,EAAGxB,UACClB,aAECwC,EAAUA,EAAUlN,OAAS,GAAG,GAC3B4K,GACAD,IFqrBlB,IAAiB1M,SAAAA,OEtqBTqN,EAAOF,EAAS/B,cAChBgC,GAAU,GACVkB,EAAiBb,EAAOY,EAAgBR,SAGlCsB,EAAK7B,EAAMiC,qBAAqB,cAC7BvN,EAAI,EAAGA,EAAImN,EAAGpN,OAAQC,IACvBmN,EAAGnN,GAAGqN,QAAQC,OACdH,EAAGnN,GAAG2L,UAAYlB,GAClB0C,EAAGnN,GAAGyN,QAAW7L,GACbsL,EAAgBC,EAAGnN,GAAI4B,EAAM8L,WAEH,eAA9BP,EAAGnN,GAAGqN,QAAQM,aACdR,EAAGnN,GAAG2L,UAAYlB,2BAClBwC,MAAgBA,GAAYE,EAAGnN,GAAGqN,QAAQC,KAAM,MACZ5N,MAA7ByN,EAAGnN,GAAGqN,QAAQM,cACrBR,EAAGnN,GAAG2L,UAAYlB,0BAClBwC,MAAgBA,GAAYE,EAAGnN,GAAGqN,QAAQC,KAAM,OFspB5DlJ,IAAwBqB,GAAG6B,SAASnC,KAAKnH,8UEzuBtC4P,WAQsBC,EAAKZ,UAC1BY,EAAIP,KACAQ,cAAwBpP,EAAGC,WACbyO,EAAW/G,KAAM4G,SACjBc,EAAgB,IAAN1H,EAAU,GAAK,EACH,iBAAjB3H,EAAE0O,SACHW,EACFC,GAAetP,EAAE0O,GAAYzO,EAAEyO,UAE7BW,EACFE,GAAevP,EAAE0O,GAAYzO,EAAEyO,SAM5CS,EAxBMK,KAAWzC,GAAQwB,2BA5J7B7B,GAASkB,EAAiBsB,EAAavB,EAAgBR,+BA8J3DL,EAAUoC,EACRtO,MAAMwM,EAAOC,GACbrE,MAAKlG,EAAMxB,MACCgH,MAAOhH,EAAI8L,EAAOtK,KAAAA,oDA9H/B6J,EAAOF,EAAS/B,eACV+E,EAAkBP,EAAY7N,OAAS+L,EACvCsC,EAAkBxD,GACpBS,EAAK,GACL,KACA,uBAEEgD,EAAezD,GACjBS,EAAK,GACL,KACA,oBAEEiD,EAAgB1D,GAClBU,EACA,KACA,oBAEEiD,EAAmB3D,GACrBU,EACA,KACA,uBAEEkD,EAA6B9C,EAAwB7L,KAAKC,IAC5DsO,EACAC,GACA,EAEAF,SACMvB,EAAcgB,EAAY7N,OAAS,GAAK8M,SAAU,yBAGpDN,GAAchB,MAClBkD,EAAY,UAEPC,EAAI,EAAGA,EAAIrD,EAAKtL,OAAQ2O,GAAK,EAClCvC,EAAUL,EAAQ4C,GAAK7C,GAAcR,EAAKqD,GAAGhC,wBAAwBd,WAErE5L,EAAI,EAEJ2O,EAAI1C,EAAaoC,EAAe,EAChCO,UAEG5O,EAAI4N,EAAY7N,eACb8O,EAAa1C,EAAUnM,IAAMkL,KACnC0D,EAAY5O,GAAK6O,EAEbF,EAAIE,EAAaL,EAA6BjC,GAE9CkC,EAAYzO,OACZoM,EACIuC,GACCjD,GACO6C,EAAmBD,GAAe,EACnCrC,EAAaoC,EAAa,UAGzCM,GAAKE,EACL7O,GAAK,MAGT8O,QAAQC,IACJ,IACA/O,EACA2O,EACAvC,EACAJ,EACAO,EACAN,EACAf,EACAsD,EACAI,EACAzC,GAEJsC,EAAY5O,KAAKC,IAAI,EAAG2O,GAEjBzO,EAAI4N,EAAY7N,YAEnB4O,GADmBxC,EAAUnM,IAAMkL,EAEnClL,GAAK,EACD2O,EAAIpC,EAAYF,aAIxBP,EAAQ2C,QACR1C,EAAM/L,SACA2M,EAAYiB,EAAY7N,OAASgM,EAC3B,IAARA,QACAA,EAAM,QAEVb,EAAgByD,EAAI5C,OAChBiD,EAAmBrC,EAAYzB,OAE5BlL,EAAI4N,EAAY7N,QACnBC,GAAK,EACLmM,EAAUnM,GAAKkL,MAInBc,EAASgD,GACJC,SAASjD,QACVA,EAAS,kEA4HEV,0BACQW,oEAILd,0BAOsBe,oEArB7BX,2BACQc,+QClMAvN,MAAMoQ,iEAA7BrO,yKA9CqB/B,sTAsBVA,kKAGKA,eAAAA,eACFA,aAAAA,4JA3BX,eAAQA,UAAM,eAAQA,qGAqBtB,eAAQA,UAAO,eAAQA,qCAtB1B+B,kBACAA,gEAoBAA,kBACAA,mFArBW/B,qBAAcA,gCACJA,wJAoBVA,sBAAeA,gCAEfA,kEAGKA,0CACFA,mlBAzBV+B,gFAS6C/B,MAAKqQ,WAE9BrQ,MAAKsQ,UACLtQ,MAAKuQ,YACLvQ,MAAKwQ,cACLxQ,MAAKyQ,0KALPzQ,MAAK0Q,iQAFvB3O,SACIJ,OACKA,qBAELA,qBACAA,qBACAA,qBACAA,sCALyC3B,MAAKqQ,kCAAhCrQ,MAAK0Q,oCAEH1Q,MAAKsQ,iCACLtQ,MAAKuQ,mCACLvQ,MAAKwQ,qCACLxQ,MAAKyQ,2ZAazB1O,gFAS6C/B,MAAKqQ,WAE9BrQ,MAAKsQ,UACLtQ,MAAKuQ,YACLvQ,MAAKwQ,cACLxQ,MAAKyQ,0KALPzQ,MAAK0Q,iQAFvB3O,SACIJ,OACKA,qBAELA,qBACAA,qBACAA,qBACAA,sCALyC3B,MAAKqQ,kCAAhCrQ,MAAK0Q,oCAEH1Q,MAAKsQ,iCACLtQ,MAAKuQ,mCACLvQ,MAAKwQ,qCACLxQ,MAAKyQ,+EA/Cb,2MHwwCpB,SAAwBE,EAASC,GAC7B,MAAMC,EAAQD,EAAKC,MAAQ,GAC3B,SAASnK,EAAOmE,EAAM3C,EAAOpE,EAAKT,GAC9B,GAAIuN,EAAKC,QAAUA,EACf,OACJD,EAAKE,SAAWzN,EAChB,IAAI0N,EAAYH,EAAK5Q,SACTY,IAARkD,IACAiN,EAAYA,EAAUvQ,QACtBuQ,EAAUjN,GAAOT,GAErB,MAAMsE,EAAQkD,IAAS+F,EAAKI,QAAUnG,GAAMkG,GAC5C,IAAIE,GAAc,EACdL,EAAKjJ,QACDiJ,EAAKM,OACLN,EAAKM,OAAO1R,SAAQ,CAACmI,EAAOzG,KACpBA,IAAMgH,GAASP,IACfL,IACAQ,EAAeH,EAAO,EAAG,GAAG,KACpBiJ,EAAKM,OAAOhQ,KAAOyG,IACnBiJ,EAAKM,OAAOhQ,GAAK,SAGzBuG,QAKRmJ,EAAKjJ,MAAMK,EAAE,GAEjBL,EAAMH,IACNE,EAAcC,EAAO,GACrBA,EAAMe,EAAEkI,EAAKO,QAASP,EAAK5O,QAC3BiP,GAAc,GAElBL,EAAKjJ,MAAQA,EACTiJ,EAAKM,SACLN,EAAKM,OAAOhJ,GAASP,GACrBsJ,GACA/K,IAGR,IA31CgB7C,EA21CDsN,IA11CkB,iBAAVtN,GAA4C,mBAAfA,EAAM4C,KA01CjC,CACrB,MAAM9B,EAAoBmB,IAc1B,GAbAqL,EAAQ1K,MAAK5C,IACT+B,EAAsBjB,GACtBuC,EAAOkK,EAAK3K,KAAM,EAAG2K,EAAKvN,MAAOA,GACjC+B,EAAsB,SACvBb,IAIC,GAHAa,EAAsBjB,GACtBuC,EAAOkK,EAAKQ,MAAO,EAAGR,EAAKrM,MAAOA,GAClCa,EAAsB,OACjBwL,EAAKS,SACN,MAAM9M,KAIVqM,EAAKI,UAAYJ,EAAKU,QAEtB,OADA5K,EAAOkK,EAAKU,QAAS,IACd,MAGV,CACD,GAAIV,EAAKI,UAAYJ,EAAK3K,KAEtB,OADAS,EAAOkK,EAAK3K,KAAM,EAAG2K,EAAKvN,MAAOsN,IAC1B,EAEXC,EAAKE,SAAWH,EAp3CxB,IAAoBtN,GGyCZrD,igBALJ,6ZAVJ+B,kBAEAA,kBAWAA,aAAmB/B,oFAwDnB+B,yEAxDmB/B,UAAAA,MHg1CnB,SAAmC4Q,EAAM5Q,EAAKU,GAC1C,MAAMqQ,EAAY/Q,EAAIQ,SAChBsQ,SAAEA,GAAaF,EACjBA,EAAKI,UAAYJ,EAAK3K,OACtB8K,EAAUH,EAAKvN,OAASyN,GAExBF,EAAKI,UAAYJ,EAAKQ,QACtBL,EAAUH,EAAKrM,OAASuM,GAE5BF,EAAKjJ,MAAMlG,EAAEsP,EAAWrQ,iOGj4CpBiM,WAcE4E,uBAZEC,aACKC,EAAO,EAAGA,EAAO,EAAGA,SACrBC,QAAYC,oDACkCF,KAE9C/O,QAAagP,EAAIE,OACrBJ,EAAYA,EAAUK,OAAOnP,cAEjCiK,EAAQ6E,GACD7E,EAGSmF,OAShB9E,EAAO+E,EACP9E,EAAK+E,EARLC,EAAa,+CAEdC,EAAevF,EAAM9D,QACnBsJ,IACmE,IAAhEA,EAAK9B,MAAM+B,cAActH,QAAQmH,EAAWG,+CAoBrCH,iFAgCCF,wBACFC,oBC9EN,mEAAQ,CAChBpQ,OAAQW,SAAS8P"}